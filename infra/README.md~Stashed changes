# Gamelift CDK Infrastructure

Before deploying this pipepeline you should complete all installation steps from the `codepipeline-custom-action` folder. 

## Create Unity License Activation Secret

1. Log in to AWS console
1. Go to **Secret Manager**
1. Create a new secret named **UnityLicenseActivationSecrets**
1. Choose "Other type of secret" as Secret Type
1. Add `UnityUsername`, `UnityPassword` and `UnitySerial` with corresponding values
1. Save secret

## Create builder AMI

1. Windows 2019 Server Base AMI, to create:
   1. Go to EC2, launch a Windows 2019 Server instance with 200GB of disk space
   1. Run the following script in powershell
      ```
      Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
      choco install -y visualstudio2019buildtools --package-parameters "--quiet --wait --norestart --nocache --add Microsoft.VisualStudio.Workload.ManagedDesktopBuildTools --add Microsoft.Net.Component.4.5.TargetingPack"
      mkdir -Path "C:\Unity"
      mkdir -Path "C:\Temp"
      choco install -y unity --version=2021.1.18 --params="'/InstallationPath:C:\Unity\'"
      $env:Path += ";C:\Unity\Editor"
      choco install -y dotnetcore dotnetcore-sdk netfx-4.7.1-devpack
      choco install -y awscli
      $env:Path += ";C:\Program Files\Amazon\AWSCLIV2"
      ```
   1. Go to **C:\ProgramData\Amazon\EC2-Windows\Launch\Config\LaunchConfig.json**, modify **adminPasswordType** to `Specify`, and set a **adminPassword**
   1. Go to AWS Console > Secrets Manager, and store a new secret `UnityBuilderAmiAdministratorPassword`, with key `Password` and your password as the value
   1. Run `C:\ProgramData\Amazon\EC2-Windows\Launch\Scripts\InitializeInstance.ps1 -SchedulePerBoot` in powershell
   1. Create an AMI from the instance on EC2
1. Go to **infra/lib/gamelift-stack.ts**
   1. Update `imageId` with the AMI id

## Create Custom Action stack

1. Change directory to **infra/codepipeline-custom-action**
1. Load Unity Plugin CICD AWS credentials into your terminal session
1. Run `aws cloudformation package --template-file template.yml --output-template-file deployment.yml --s3-bucket <S3_BUCKET>`
1. Run `aws cloudformation deploy --template-file deployment.yml --capabilities CAPABILITY_NAMED_IAM --stack-name codepipeline-custom-action-unity --parameter-overrides CustomActionProviderVersion=2`
   1. NOTE: if you change `CustomActionProviderVersion`, make sure to update the `providerVersion` in **infra/lib/gamelift-stack.ts** and also this README

## Create CICD stack

1. (One-off) Install npm if needed: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm
1. Change directory to **infra**
1. Run `npm i`
1. Load Unity Plugin CICD AWS credentials into your terminal session   
1. Run `npm run cdk diff` to view diff 
1. Run `npm run cdk deploy` to deploy the CICD stack

## Modify CICD stack with GitHub source

For now, the source is setup with internal CodeCommit repo as the source. To update it to use Github:

1. Go to CodePipeline
1. Find **GameliftStack-Pipeline...** > **Edit**
1. In **Edit: Source**, select **Edit stage**
1. Delete **SourceGit**
1. Create a new Stage Action named `SourceGit` (name doesn't matter)
1. Change **Action Provider** to `GitHub (Version 1)`
1. Connect to Github with your account
1. Choose `aws/amazon-gamelift-plugin-unity` as **Repository**, `develop` as **Branch**, and `Artifact_Source_SourceGit` as **Output artifacts**
1. Save the change via **Done**
1. Release the change
1. Wait and verify that the build is successful

This step will eventually be automated via CDK: https://github.com/aws/aws-cdk/tree/master/packages/%40aws-cdk/aws-codepipeline-actions 

## Debug builds

1. Launch a new instance from the AMI, see **gamelift-stack.ts** for AMI id
   1. Make sure to use at least c5.2xlarge as the instance type
   1. Specify `ec2-builder-instance-profile` as your instance profile
   1. Make sure port 3389 is allowlisted in security group (it should be by default)
1. Wait for the instance state to be RUNNING
1. Connect to the instance by downloading the RDP file and running it via Microsoft Remote Desktop
1. Fetch the Administrator password from Secrets Manager with secret id `UnityBuilderAmiAdministratorPassword`
1. 
